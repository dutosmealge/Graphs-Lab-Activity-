class Graph {
    // Adjacency matrix 
    private int[][] adjMatrix;
    // Store the data (char) for each vertex
    private char[] vertexData;
    // Size of the graph
    private int size;

    // Constructor 
    public Graph(int size) {
        this.size = size;
        this.adjMatrix = new int[size][size]; 
        this.vertexData = new char[size]; 
    }

    // Method 
    public void addEdge(int u, int v) {
        if (u >= 0 && u < size && v >= 0 && v < size) {
            adjMatrix[u][v] = 1;  
            adjMatrix[v][u] = 1;  
        }
    }

    // 
    public void addVertexData(int vertex, char data) {
        if (vertex >= 0 && vertex < size) {
            vertexData[vertex] = data; // 
        }
    }

    // 
    public void printGraph() {
        System.out.println("Adjacency Matrix:");
        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                System.out.print(adjMatrix[i][j] + " ");  
            }
            System.out.println();  
        }

        
        System.out.println("\nVertex Data:");
        for (int i = 0; i < size; i++) {
            System.out.println("Vertex " + i + ": " + vertexData[i]);
        }
    }
}

public class AdjacencyListGraphs {
    public static void main(String[] args) {
        Graph graph = new Graph(5);
        
        // Assign data to each vertex
        graph.addVertexData(0, 'A');
        graph.addVertexData(1, 'B');
        graph.addVertexData(2, 'C');
        graph.addVertexData(3, 'D');
        graph.addVertexData(4, 'E');
        
        // Add edges between vertices (undirected)
        graph.addEdge(0, 1);  // A - B
        graph.addEdge(0, 2);  // A - C
        graph.addEdge(0, 3);  // A - D
        graph.addEdge(1, 2);  // B - C
        graph.addEdge(2, 4);  // C - E

        
        graph.printGraph();
    }
}